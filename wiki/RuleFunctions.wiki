#labels Featured
= Rule Functions =

== Basics ==

  * all function names are case insensitive (forced to lowercase)
  * do not place a space(s) between the function name and the leading bracket, eg `pt( ... )` good, `pt ( ... )` bad
  * the logic operatives *`and`*, *`or`*, *`not`* _must_ be in lower case or they will generate an error
  * the arguments passed to a function are normally case insensitive (converted to lower case for matching purposes), unless that function specifically requires an exact case match (eg PT)
  * leading and trailing spaces are trimmed from all arguments
  * rules are validated before being saved so you cannot save an invalid rule
  * if for some reason a rule becomes damaged (most likely because of code changes) it will be flagged as damaged and not used until corrected and saved
  * nearly all the rules can take multiple arguments separated by commas, in those cases it functions as an explicit or. eg `name( scroll, elixir, potion )` is equivalent to `name( scroll ) or name( elixir ) or name( potion )`

== Functions ==
  * [RuleFunction_Soulbound soulbound()]
  * [RuleFunction_Name name( arg1, ..., argN )]
  * [RuleFunction_ItemID id( arg1, ..., argN )]
  * [RuleFunction_ItemType itemtype( arg1, ..., argN )]
  * [RuleFunction_ItemSubType subtype( arg1, ..., argN )]
  * [RuleFunction_Equip equip( arg1, ..., argN )]
  * [RuleFunction_Empty empty()]
  * [RuleFunction_PeriodicTable periodictable( set1, ..., setN )]
  * [RuleFunction_Tooltip tooltip( arg1, ..., argN )]
  * [RuleFunction_ItemQuality quality( arg1, ..., argN )]
  * [RuleFunction_ItemLevelStat itemlevel( min, max )]


==ireq( min, max )==
checks if the level required to use an item is equal to or between the min and max arguments passed


*Args*

`min: number`

`max: number`


*Remarks*

  * when passed a single argument the function checks for an exact level match 


*Examples*

`ireq( 70 )`

`ireq( 61-69 )`




==outfit( arg, arg, ..., arg )==
matches items in sets from outfit type mods, eg Outfitter, ClosetGnome, ItemRack


*Args*

`arg: string` (set name, case insensitive) 


*Remarks*

  * case insensitive comparison
  * if passed no arguments will return true if the item is in any set
  * dynamically chooses depending on which outfit mod is active
  * ItemRack is currently functional using the 2.0 beta of ItemRack
  * after changing the set an item belongs to in the outfit mod you will need to use the reload menu option in ArkInventory to have it update to the new category 


*Examples*

`outfit( arcane resist )`

`outfit( fishing )`

`outfit()`